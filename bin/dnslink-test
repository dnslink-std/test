#!/usr/bin/env node
const { startServer, getCommand, runTests } = require('..')
const { version, homepage } = require('../package.json')
const AbortController = require('abort-controller')

;(async function main () {
  const controller = new AbortController()
  const { signal } = controller
  process.on('SIGINT', onSigint)
  try {
    const [args, cmdParts] = splitDoubleHyphen(process.argv.slice(2))
    const flags = getFlags(args)
    if (args.includes('-h') || args.includes('--help') || args.includes('help')) {
      showHelp()
      return 0
    }
    const serverOnly = args.includes('--server-only')
    if (!serverOnly && cmdParts.length === 0) {
      showHelp()
      return 1
    }
    if (args.includes('-v') || args.includes('--version')) {
      showVersion()
      return 0
    }
    const exitEarly = args.includes('--early') || args.includes('--exit-early')
    const { serverOpts, close } = await startServer()
    try {
      if (serverOnly) {
        console.log(serverOpts)
        return await new Promise(resolve => signal.addEventListener('abort', resolve))
      }
      const cmd = await getCommand(cmdParts, serverOpts, signal)
      const filter = getFilter(args)
      const harness = runTests(cmd, flags, filter)
      let exit = 0
      harness.onFailure(() => {
        exit = 1
        if (exitEarly) {
          setImmediate(() => process.exit(1))
        }
      })
      const stream = harness.createStream({ objectMode: false })
      for await (const line of stream) {
        if (signal.aborted) {
          break
        }
        process.stdout.write(line.toString())
      }
      return signal.aborted ? 1 : exit
    } finally {
      await close()
    }
  } finally {
    process.off('SIGINT', onSigint)
  }

  function onSigint () {
    controller.abort()
  }
})()
  .then(
    code => process.exit(code),
    err => {
      console.error((err && (err.stack || err.message)) || err)
      process.exit(1)
    }
  )

function showHelp () {
  console.log(`dnslink-test - Test dnslink implementations

USAGE
    dnslink-test [--help] [--version] [-e <flag>] [--exit-early] \\
        [--server-only] [--skip=<test-id>] [--only=<test-id>] -- <command>

EXAMPLE
    # Run the "my-impl" command against a series of tests
    > dnslink-test -- my-impl
    
    # Run the "my-impl" command against a series of tests with log support
    > dnslink-test -e log -- my-impl

    # Run only the tests t02 and t10
    > dnslink-test --only=t02 --only=t10 -- my-impl

    # Skipping test t04 and t05
    > dnslink-test --skip=t04 --skip=t05 -- my-impl

OPTIONS
    --help, -h, help             Show this help
    --version, -v                Show the version of this command
    --enable=<flag>, -e <flag>   Enable a flag
    --exit-early, --early        Exit the when the first test fails
    --server-only                Start the test DNS server without running
                                 the tests
    --skip=<test-id>             Skips one particular test, only for dev-use
    --only=<test-id>             Enables one particular test, only for dev-use

FLAGS
    --enable=log   Test if the implementation supports log messages
    --enable=eth   Test if the implementation supports .eth domains

Read more about it here: ${homepage}

dnslink-test@${version}
`)
}

function getFilter (args) {
  const filter = {}
  for (const arg of args) {
    const parts = /^(--(skip|only))=(.+)$/.exec(arg)
    if (parts) {
      const type = parts[2]
      const test = parts[3]
      if (type === 'skip') {
        const skip = filter.skip
        if (skip) {
          skip.push(test)
        } else {
          filter.skip = [test]
        }
      } else {
        const only = filter.only
        if (only) {
          only.push(test)
        } else {
          filter.only = [test]
        }
      }
    }
  }
  return filter
}

function getFlags (args) {
  const flags = {}
  let next = false
  for (const arg of args) {
    if (arg === '--enable' || arg === '-e') {
      next = true
      continue
    }
    if (next) {
      flags[arg] = true
      next = false
    } else {
      const parts = /^(--enable|-e)=(.+)$/.exec(arg)
      if (parts) {
        flags[parts[2]] = true
      }
    }
  }
  return flags
}

function showVersion () {
  console.log(version)
}

function splitDoubleHyphen (args) {
  for (let i = 0; i < args.length; i++) {
    if (args[i] === '--') {
      return [args.slice(0, i), args.slice(i + 1)]
    }
  }
  return [args, []]
}
